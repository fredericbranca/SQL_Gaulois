SQL Gaulois

A partir du script SQL Gaulois fourni par votre formateur, écrivez et exécutez les requêtes SQL suivantes :

1. Nom des lieux qui finissent par 'um'.

    SELECT *
    FROM gaulois.lieu //FROM gaulois.lieu peut-être écrit simplement FROM lieu
    WHERE nom_lieu LIKE '%um';

2. Nombre de personnages par lieu (trié par nombre de personnages décroissant).

    SELECT gaulois.lieu.id_lieu, gaulois.lieu.nom_lieu, COUNT(gaulois.personnage.id_lieu) AS nombre_personnages
    FROM gaulois.lieu
    INNER JOIN gaulois.personnage ON gaulois.lieu.id_lieu = gaulois.personnage.id_lieu //On utilise INNER JOIN plutot que WHERE pour les jointures 
    GROUP BY gaulois.lieu.id_lieu
    ORDER BY nombre_personnages DESC;

Simplifié avec des "alias" :

    SELECT l.id_lieu, l.nom_lieu, COUNT(p.id_lieu) AS nbPerso
    FROM lieu l
    INNER JOIN personnage p ON l.id_lieu = p.id_lieu 
    GROUP BY l.id_lieu 
    ORDER BY nbPerso DESC;

3. Nom des personnages + spécialité + adresse et lieu d'habitation, triés par lieu puis par nom de personnage.

    SELECT p.nom_personnage, s.nom_specialite, p.adresse_personnage, l.nom_lieu
    FROM personnage p
    INNER JOIN specialite s ON p.id_specialite = s.id_specialite
    INNER JOIN lieu l ON p.id_lieu = l.id_lieu
    ORDER BY l.nom_lieu, p.nom_personnage;

4. Nom des spécialités avec nombre de personnages par spécialité (trié par nombre de
personnages décroissant).

    SELECT s.nom_specialite, COUNT(p.id_specialite) AS nbPerso
    FROM personnage p
    INNER JOIN specialite s ON p.id_specialite = s.id_specialite
    GROUP BY p.id_specialite
    ORDER BY nbPerso DESC;

5. Nom, date et lieu des batailles, classées de la plus récente à la plus ancienne (dates affichées
au format jj/mm/aaaa).

    SELECT b.nom_bataille, DATE_FORMAT(b.date_bataille, "%d/%m/%Y") AS dateB, l.nom_lieu
    FROM bataille b
    INNER JOIN lieu l ON b.id_lieu = l.id_lieu
    ORDER BY dateB ASC;

6. Nom des potions + coût de réalisation de la potion (trié par coût décroissant).

    SELECT p.nom_potion, SUM(c.qte * i.cout_ingredient) AS cout_potion
    FROM potion p
    LEFT JOIN composer c ON c.id_potion = p.id_potion //permet de lister les ingrédients même s'ils ne sont pas présent dans la table jointe 
    LEFT JOIN ingredient i ON c.id_ingredient = i.id_ingredient
    GROUP BY p.id_potion
    ORDER BY cout_potion DESC;

7. Nom des ingrédients + coût + quantité de chaque ingrédient qui composent la potion 'Santé'.

    SELECT p.nom_potion, i.nom_ingredient, i.cout_ingredient, c.qte 
    FROM potion p 
    INNER JOIN composer c ON c.id_potion = p.id_potion 
    INNER JOIN ingredient i ON c.id_ingredient = i.id_ingredient
    WHERE p.nom_potion = 'Santé';

8. Nom du ou des personnages qui ont pris le plus de casques dans la bataille 'Bataille du village
gaulois'

    WITH CasquesBataille AS (
        SELECT p.nom_personnage, SUM(pc.qte) AS total_casques
        FROM personnage p
        INNER JOIN prendre_casque pc ON pc.id_personnage = p.id_personnage
        INNER JOIN bataille b ON b.id_bataille = pc.id_bataille
        WHERE b.nom_bataille = 'Bataille du village gaulois'
        GROUP BY p.id_personnage HAVING total_casques ),
    MaxCasques AS (
        SELECT MAX(total_casques) AS max_casques
        FROM CasquesBataille )
    SELECT cb.nom_personnage, cb.total_casques
    FROM CasquesBataille cb
    JOIN MaxCasques mc ON cb.total_casques = mc.max_casques; //JOIN tout seul équivaut à INNER JOIN qui est le type de jointure par défaut

    Autre version :
 
    SELECT p.nom_personnage, SUM(pc.qte) AS total_casques
    FROM personnage p
    INNER JOIN prendre_casque pc ON pc.id_personnage = p.id_personnage
    INNER JOIN bataille b ON b.id_bataille = pc.id_bataille
    WHERE b.nom_bataille = 'Bataille du village gaulois'
    GROUP BY p.id_personnage HAVING total_casques >= ALL( 
        SELECT MAX(pc.qte)
        FROM prendre_casque pc
        INNER JOIN bataille b ON b.id_bataille = pc.id_bataille
		WHERE b.nom_bataille = 'Bataille du village gaulois'
        GROUP by pc.id_personnage);

9. Nom des personnages et leur quantité de potion bue (en les classant du plus grand buveur au plus petit).

    SELECT p.nom_personnage, SUM(b.dose_boire) AS potion_bue
    FROM personnage p
    LEFT JOIN boire b ON b.id_personnage = p.id_personnage
    GROUP BY p.id_personnage
    ORDER BY potion_bue DESC;

10. Nom de la bataille où le nombre de casques pris a été le plus important.

    WITH CasquesBataille AS (
        SELECT b.nom_bataille, SUM(pc.qte) AS total_casques
        FROM bataille b
        JOIN prendre_casque pc ON pc.id_bataille = b.id_bataille
        GROUP BY b.id_bataille ),
    MaxCasques AS (
        SELECT MAX(total_casques) AS max_casques
        FROM CasquesBataille )
    SELECT cb.nom_bataille, cb.total_casques
    FROM CasquesBataille cb
    JOIN MaxCasques mc ON cb.total_casques = mc.max_casques;

11. Combien existe-t-il de casques de chaque type et quel est leur coût total ? (classés par nombre décroissant)

    SELECT tc.nom_type_casque, COUNT(c.nom_casque) AS nb_casques, SUM(c.cout_casque) AS cout_total
    FROM type_casque tc
    JOIN casque c ON c.id_type_casque = tc.id_type_casque
    GROUP BY tc.id_type_casque
    ORDER BY nb_casques DESC;

12. Nom des potions dont un des ingrédients est le poisson frais.

    SELECT p.nom_potion AS 'Potion qui contient du poisson frais'
    FROM potion p
    JOIN composer c ON c.id_potion = p.id_potion
    JOIN ingredient i ON i.id_ingredient = c.id_ingredient
    WHERE i.nom_ingredient = 'Poisson frais';

13. Nom du / des lieu(x) possédant le plus d'habitants, en dehors du village gaulois.

    WITH HabitantsParLieu AS (
        SELECT l.nom_lieu, COUNT(p.id_personnage) AS nb_habitants
        FROM lieu l
        LEFT JOIN personnage p ON l.id_lieu = p.id_lieu
        WHERE l.nom_lieu != 'Village gaulois'
        GROUP by l.id_lieu ),
    MaxHabitants AS (
        SELECT MAX(nb_habitants) as max_habitants
        FROM HabitantsParLieu )
    SELECT hpl.nom_lieu AS "Lieu avec le plus d'habitant", hpl.nb_habitants AS "Nombre d'habitants"
    FROM HabitantsParLieu hpl
    JOIN MaxHabitants mh ON hpl.nb_habitants = mh.max_habitants;

14. Nom des personnages qui n'ont jamais bu aucune potion.

    SELECT p.nom_personnage AS "Personnages qui n'ont jamais bu aucune potion"
    FROM personnage p
    LEFT JOIN boire b ON p.id_personnage = b.id_personnage
    WHERE b.dose_boire IS NULL
    GROUP BY p.id_personnage