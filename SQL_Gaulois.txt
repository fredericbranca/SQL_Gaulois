SQL Gaulois

A partir du script SQL Gaulois fourni par votre formateur, écrivez et exécutez les requêtes SQL suivantes :

1. Nom des lieux qui finissent par 'um'.

    SELECT *
    FROM gaulois.lieu //FROM gaulois.lieu peut-être écrit simplement FROM lieu
    WHERE nom_lieu LIKE '%um';

2. Nombre de personnages par lieu (trié par nombre de personnages décroissant).

    SELECT gaulois.lieu.id_lieu, gaulois.lieu.nom_lieu, COUNT(gaulois.personnage.id_lieu) AS nombre_personnages
    FROM gaulois.lieu
    INNER JOIN gaulois.personnage ON gaulois.lieu.id_lieu = gaulois.personnage.id_lieu //On utilise INNER JOIN plutot que WHERE pour les jointures 
    GROUP BY gaulois.lieu.id_lieu
    ORDER BY nombre_personnages DESC;

Simplifié avec des "alias" :

    SELECT l.id_lieu, l.nom_lieu, COUNT(p.id_lieu) AS nbPerso
    FROM lieu l
    INNER JOIN personnage p ON l.id_lieu = p.id_lieu 
    GROUP BY l.id_lieu 
    ORDER BY nbPerso DESC;

3. Nom des personnages + spécialité + adresse et lieu d'habitation, triés par lieu puis par nom de personnage.

    SELECT p.nom_personnage, s.nom_specialite, p.adresse_personnage, l.nom_lieu
    FROM personnage p
    INNER JOIN specialite s ON p.id_specialite = s.id_specialite
    INNER JOIN lieu l ON p.id_lieu = l.id_lieu
    ORDER BY l.nom_lieu, p.nom_personnage;

4. Nom des spécialités avec nombre de personnages par spécialité (trié par nombre de
personnages décroissant).

    SELECT s.nom_specialite, COUNT(p.id_specialite) AS nbPerso
    FROM personnage p
    INNER JOIN specialite s ON p.id_specialite = s.id_specialite
    GROUP BY p.id_specialite
    ORDER BY nbPerso DESC;

5. Nom, date et lieu des batailles, classées de la plus récente à la plus ancienne (dates affichées
au format jj/mm/aaaa).

    SELECT b.nom_bataille, DATE_FORMAT(b.date_bataille, "%d/%m/%Y") AS dateB, l.nom_lieu
    FROM bataille b
    INNER JOIN lieu l ON b.id_lieu = l.id_lieu
    ORDER BY dateB ASC;

6. Nom des potions + coût de réalisation de la potion (trié par coût décroissant).

    SELECT p.nom_potion, SUM(c.qte * i.cout_ingredient) AS cout_potion
    FROM potion p
    LEFT JOIN composer c ON c.id_potion = p.id_potion //permet de lister les ingrédients même s'ils ne sont pas présent dans la table jointe 
    LEFT JOIN ingredient i ON c.id_ingredient = i.id_ingredient
    GROUP BY p.id_potion
    ORDER BY cout_potion DESC;

7. Nom des ingrédients + coût + quantité de chaque ingrédient qui composent la potion 'Santé'.

    SELECT p.nom_potion, i.nom_ingredient, i.cout_ingredient, c.qte 
    FROM potion p 
    INNER JOIN composer c ON c.id_potion = p.id_potion 
    INNER JOIN ingredient i ON c.id_ingredient = i.id_ingredient
    WHERE p.nom_potion = 'Santé';

8. Nom du ou des personnages qui ont pris le plus de casques dans la bataille 'Bataille du village
gaulois'

    WITH CasquesBataille AS (
        SELECT p.nom_personnage, SUM(pc.qte) AS total_casques
        FROM personnage p
        INNER JOIN prendre_casque pc ON pc.id_personnage = p.id_personnage
        INNER JOIN bataille b ON b.id_bataille = pc.id_bataille
        WHERE b.nom_bataille = 'Bataille du village gaulois'
        GROUP BY p.id_personnage HAVING total_casques ),
    MaxCasques AS (
        SELECT MAX(total_casques) AS max_casques
        FROM CasquesBataille )
    SELECT cb.nom_personnage, cb.total_casques
    FROM CasquesBataille cb
    JOIN MaxCasques mc ON cb.total_casques = mc.max_casques; //JOIN tout seul équivaut à INNER JOIN qui est le type de jointure par défaut

    Autre version :
 
    SELECT p.nom_personnage, SUM(pc.qte) AS total_casques
    FROM personnage p
    INNER JOIN prendre_casque pc ON pc.id_personnage = p.id_personnage
    INNER JOIN bataille b ON b.id_bataille = pc.id_bataille
    WHERE b.nom_bataille = 'Bataille du village gaulois'
    GROUP BY p.id_personnage HAVING total_casques >= ALL( 
        SELECT MAX(pc.qte)
        FROM prendre_casque pc
        INNER JOIN bataille b ON b.id_bataille = pc.id_bataille
		WHERE b.nom_bataille = 'Bataille du village gaulois'
        GROUP by pc.id_personnage);

9. Nom des personnages et leur quantité de potion bue (en les classant du plus grand buveur au plus petit).

    SELECT p.nom_personnage, SUM(b.dose_boire) AS potion_bue
    FROM personnage p
    LEFT JOIN boire b ON b.id_personnage = p.id_personnage
    GROUP BY p.id_personnage
    ORDER BY potion_bue DESC;

10. Nom de la bataille où le nombre de casques pris a été le plus important.

    WITH CasquesBataille AS (
        SELECT b.nom_bataille, SUM(pc.qte) AS total_casques
        FROM bataille b
        JOIN prendre_casque pc ON pc.id_bataille = b.id_bataille
        GROUP BY b.id_bataille ),
    MaxCasques AS (
        SELECT MAX(total_casques) AS max_casques
        FROM CasquesBataille )
    SELECT cb.nom_bataille, cb.total_casques
    FROM CasquesBataille cb
    JOIN MaxCasques mc ON cb.total_casques = mc.max_casques;

11. Combien existe-t-il de casques de chaque type et quel est leur coût total ? (classés par nombre décroissant)

    SELECT tc.nom_type_casque, COUNT(c.nom_casque) AS nb_casques, SUM(c.cout_casque) AS cout_total
    FROM type_casque tc
    JOIN casque c ON c.id_type_casque = tc.id_type_casque
    GROUP BY tc.id_type_casque
    ORDER BY nb_casques DESC;

12. Nom des potions dont un des ingrédients est le poisson frais.

    SELECT p.nom_potion AS 'Potion qui contient du poisson frais'
    FROM potion p
    JOIN composer c ON c.id_potion = p.id_potion
    JOIN ingredient i ON i.id_ingredient = c.id_ingredient
    WHERE i.nom_ingredient = 'Poisson frais';

13. Nom du / des lieu(x) possédant le plus d'habitants, en dehors du village gaulois.

    WITH HabitantsParLieu AS (
        SELECT l.nom_lieu, COUNT(p.id_personnage) AS nb_habitants
        FROM lieu l
        LEFT JOIN personnage p ON l.id_lieu = p.id_lieu
        WHERE l.nom_lieu != 'Village gaulois'
        GROUP by l.id_lieu ),
    MaxHabitants AS (
        SELECT MAX(nb_habitants) as max_habitants
        FROM HabitantsParLieu )
    SELECT hpl.nom_lieu AS "Lieu avec le plus d'habitant", hpl.nb_habitants AS "Nombre d'habitants"
    FROM HabitantsParLieu hpl
    JOIN MaxHabitants mh ON hpl.nb_habitants = mh.max_habitants;

14. Nom des personnages qui n'ont jamais bu aucune potion.

    SELECT p.nom_personnage AS "Personnages qui n'ont jamais bu aucune potion"
    FROM personnage p
    LEFT JOIN boire b ON p.id_personnage = b.id_personnage
    WHERE b.dose_boire IS NULL
    GROUP BY p.id_personnage;

15. Nom du / des personnages qui n'ont pas le droit de boire de la potion 'Magique'.

    SELECT p.nom_personnage AS "Personnages qui n'ont pas le droit de boire de la potion 'Magique'"
    FROM personnage p
    JOIN autoriser_boire ab ON p.id_personnage = ab.id_personnage
    JOIN potion pot ON ab.id_potion = pot.id_potion
    WHERE pot.nom_potion = 'Magique';

En écrivant toujours des requêtes SQL, modifiez la base de données comme suit :

A. Ajoutez le personnage suivant : Champdeblix, agriculteur résidant à la ferme Hantassion de Rotomagus.

    INSERT INTO personnage (nom_personnage, adresse_personnage, id_lieu, id_specialite)
    SELECT 'Champdeblix', 'Ferme Hantassion', l.id_lieu, s.id_specialite
    FROM lieu l, specialite s
    WHERE l.nom_lieu = 'Rotomagus' AND s.nom_specialite = 'Agriculteur';

B. Autorisez Bonemine à boire de la potion magique, elle est jalouse d'Iélosubmarine...

    INSERT INTO autoriser_boire (id_potion, id_personnage)
    SELECT pot.id_potion, p.id_personnage
    FROM personnage p, potion pot
    WHERE p.nom_personnage = 'Bonemine' AND pot.nom_potion = 'Magique';

C. Supprimez les casques grecs qui n'ont jamais été pris lors d'une bataille.

    DELETE FROM prendre_casque
    WHERE id_casque IN (
        SELECT c.id_casque
        FROM casque c
        JOIN type_casque tc ON c.id_type_casque = tc.id_type_casque
        WHERE tc.nom_type_casque = 'Grec' );

D. Modifiez l'adresse de Zérozérosix : il a été mis en prison à Condate.

    UPDATE personnage
    SET adresse_personnage = 'Prison',
        id_lieu = (
            SELECT l.id_lieu
            FROM lieu l
            WHERE l.nom_lieu = 'Condate')
    WHERE nom_personnage = 'Zérozérosix';

E. La potion 'Soupe' ne doit plus contenir de persil.

    DELETE FROM composer
    WHERE id_potion IN (
        SELECT p.id_potion
        FROM potion p
        WHERE p.nom_potion = 'Soupe') 
    AND id_ingredient IN (
        SELECT i.id_ingredient
        FROM ingredient i
        WHERE i.nom_ingredient = 'Persil' );

Autre solution:

    DELETE FROM composer
    WHERE (id_potion, id_ingredient) IN (
        SELECT * 
        FROM (
            SELECT p.id_potion, i.id_ingredient
            FROM potion p
            JOIN composer c ON p.id_potion = c.id_potion
            JOIN ingredient i ON i.id_ingredient = c.id_ingredient
            WHERE p.nom_potion = 'Soupe' AND i.nom_ingredient = 'Persil' 
        ) AS subquery );

Autre solution (et adopté) :

    DELETE c
    FROM composer c
    INNER JOIN potion p ON c.id_potion = p.id_potion
    INNER JOIN ingredient i ON c.id_ingredient = i.id_ingredient
    WHERE p.nom_potion = 'Soupe' AND i.nom_ingredient = 'Persil';

F. Obélix s'est trompé : ce sont 42 casques Weisenau, et non Ostrogoths, qu'il a pris lors de la bataille 'Attaque de la banque postale'. Corrigez son erreur !

    UPDATE prendre_casque
    SET qte = 42,
        id_casque = (
        SELECT c.id_casque
        FROM casque c
        WHERE c.nom_casque = 'Weisenau')
    WHERE id_bataille = (
        SELECT b.id_bataille
        FROM bataille b 
        WHERE b.nom_bataille = 'Attaque de la banque postale'
    ) AND id_personnage = (
        SELECT p.id_personnage
        FROM personnage p 
        WHERE p.nom_personnage = 'Obélix' );

Autre solution (meilleure je trouve):

    UPDATE prendre_casque pc
    JOIN casque c ON c.nom_casque = 'Weisenau'
    JOIN bataille b ON b.nom_bataille = 'Attaque de la banque postale'
    JOIN personnage p ON pc.id_personnage = p.id_personnage
    SET pc.qte = 42, pc.id_casque = c.id_casque
    WHERE pc.id_bataille = b.id_bataille AND p.nom_personnage = 'Obélix';